1.不管任务的调度，先把上下文的保存和恢复写完。
	（1）了解MSP和PSP的区别，知道OSEK的基本任务所使用的是哪个堆栈指针。
	（2）了解基于Cortex M0体系结构下，R0-R3等，与上下文的关系。
	（3）搞清楚函数里面的局部变量是如何存在于寄存器里面的。函数返回又是怎么一回事。
	（4）	#if
		如果上下文不包括R0等，则直接通过第一个参数来确定结构体的地址，然后赋值。
		#else 
		编写小程序，通过在线调试查看
任务1的解决：
	（2）非中断情况下：上下文保存涉及的寄存器有R4--R11，R13（SP），R15（PC）
	        中断情况下：
	（3）C语言编译，函数调用的时候，形参、函数返回地址、局部变量依次压入栈中，函数返回的时候，将返回值存到特定的寄存器里面，然后执行返回指令，返回的地址则是目前在栈顶的函数返回地址（也就是函数调用的下一条指令），返回值则从寄存器里面读取。


2. 中断的相关知识，包括中断上下文保存、中断派发函数、中断处理函数、中断嵌套
	（1）结合任务1的上下文理解，来进行中断上下文的保存与恢复工作。
	（2）理清楚中断发生时候的PC、SP的变化，当中断嵌套打开时，中断嵌套是怎么操作的。